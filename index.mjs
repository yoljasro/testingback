// Import –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import express from "express";
import bodyParser from "body-parser";
import nodemailer from "nodemailer";
import crypto from "crypto";
import cors from "cors";
import AdminJS from "adminjs";
import PDFDocument from "pdfkit"
import AdminJSExpress from "@adminjs/express";
import * as AdminJSMongo from "@adminjs/mongoose";
import mongoose from "mongoose";
import MongoStore from 'connect-mongo'; 
import  session  from 'express-session';
import argon2  from "argon2"
import path from 'path';
import fs from 'fs';
import multer from 'multer';
import { Chart } from "react-chartjs-2";
import "chart.js/auto";
import { ComponentLoader } from "adminjs";

const componentLoader = new ComponentLoader(); // Yangi ComponentLoader yaratamiz


// Mongoose –º–æ–¥–µ–ª–∏
mongoose.connect("mongodb+srv://saidaliyevjasur450:xkSeavDSFqazblwx@paymall.t1g8n.mongodb.net", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Express-session sozlamalari


// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (xodim)
const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  id: { type: String, required: true },
  idName: { type: String, required: true },
  name: { type: String, required: true },
  age: { type: Number, required: true },
  gender: { type: String, required: true },
  companyName: { type: String, required: true },
  region: { type: String, required: true },
  
  // ‚úÖ Avvalgidek qoladigan TestQuestionTwo natijalari
  testResults: [
    {
      questionId: { type: mongoose.Schema.Types.ObjectId, ref: 'TestQuestionTwo' },
      answer: { type: String },
      score: { type: Number },
    }
  ],
  interpretation: { type: String, default: "" },
  calculatedScores: {
    tensiya: { type: Number, default: 0 },
    rezistensiya: { type: Number, default: 0 },
    charchash: { type: Number, default: 0 }
  },

  // ‚úÖ Yangi qo‚Äòshilayotgan TestQuestionThree natijalari
  testResultsThree: [
    { questionId: { type: mongoose.Schema.Types.ObjectId, ref: 'TestQuestionThree' }, answer: String, score: Number }
  ], 
  interpretationThree: { type: String, default: "" }, // TestQuestionThree uchun interpretatsiya
  calculatedScoresThree: {
    –ò: { type: Number, default: 0 },
    –ü: { type: Number, default: 0 },
    –§: { type: Number, default: 0 },
    –ú: { type: Number, default: 0 },
    –†: { type: Number, default: 0 },
    –û: { type: Number, default: 0 },
    –ö: { type: Number, default: 0 },
    –î: { type: Number, default: 0 }
  },

  role: {
    type: String,
    required: false,
    enum: ["client", "psychologist", "creator"],
    default: "client",
  },
}, { timestamps: true });

const User = mongoose.model("User", userSchema);





// –ú–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (buyurtmachi)
const clientSchema = new mongoose.Schema({
  email: { type: String, unique: true, sparse: true },
  idName: { type: String, required: true, unique: true },
});
const Client = mongoose.model("Client", clientSchema);

// –ú–æ–¥–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
const testQuestionSchema = new mongoose.Schema({
  question: String,
  options: [String],
  number: Number,
  phase: String, // Bosqich (tensiya, rezistensiya, charchash)
  points: [Number], // Variantlar uchun ball
});

const TestQuestion = mongoose.model("TestQuestion", testQuestionSchema);

const testQuestionTwoSchema = new mongoose.Schema({
  question: { type: String, required: true },
  options: { type: [String], required: true },
  number: { type: Number, required: true },
  phase: { type: String, required: true }, // ‚úÖ Majburiy qilindi
  points: { type: [Number], required: true },
  category: { type: String, default: "General" },
  weight: { type: Number, default: 1 },
});

const TestQuestionTwo = mongoose.model("TestQuestionTwo", testQuestionTwoSchema);


const testQuestionThreeSchema = new mongoose.Schema({
  question: { type: String, required: true },
  number: { type: Number, required: true },
  options: { 
    type: [{ type: String, required: true }], 
    validate: {
      validator: function (v) {
        return v.length > 0;
      },
      message: "Options cannot be empty!",
    },
  }, 
  roles: { 
    type: [{ type: String, enum: ["–ò", "–ü", "–§", "–ú", "–†", "–û", "–ö", "–î"], required: true }],
    validate: {
      validator: function (v) {
        return v.length > 0;
      },
      message: "Roles cannot be empty!",
    },
  },
  points: { 
    type: [{ type: Number, required: true }], 
    validate: {
      validator: function (v) {
        return v.length > 0;
      },
      message: "Points cannot be empty!",
    },
  },
}, { timestamps: true });

const TestQuestionThree = mongoose.model("TestQuestionThree", testQuestionThreeSchema);




// const TestQuestion = mongoose.model("TestQuestion", testQuestionSchema);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Express –∏ AdminJS
const app = express();
app.use(bodyParser.json());
app.use(cors());
app.use("/uploads", express.static("uploads")); // PDF fayllarni xizmat qilish

app.use(
  session({
    secret: 'some-secret-password',
    resave: false,
    saveUninitialized: false,
    store: MongoStore.create({ mongoUrl: "mongodb+srv://saidaliyevjasur450:xkSeavDSFqazblwx@paymall.t1g8n.mongodb.net" }),
    cookie: { maxAge: 1000 * 60 * 60 }, // 1 soat davomida sessiya saqlanadi
  })
);


// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AdminJS
AdminJS.registerAdapter(AdminJSMongo);

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/testResults'); // Directory to store PDFs
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname)); // Create unique filename
  },
});

const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'application/pdf') {
      cb(null, true);
    } else {
      cb(new Error('Only PDF files are allowed'), false);
    }
  },
});

// Express endpoint to handle the file upload
app.post('/uploadTestResults', upload.single('testResults'), (req, res) => {
  const filePath = req.file.path; // Store the file path in the database
  res.send({ filePath });
});

const adminJs = new AdminJS({
  componentLoader,
  resources: [
    {
      resource: User,
      options: {
        parent: { name: "Foydalanuvchilar", icon: "User" },
        listProperties: ["email", "id", "name", "age", "gender", "companyName", "region", "role", "interpretation", "interpretationThree"],
        showProperties: ["email", "id", "name", "age", "gender", "companyName", "region", "interpretation", "interpretationThree", "testResults", "testResultsThree", "role"],
        editProperties: ["email", "password", "id", "name", "age", "gender", "idName", "companyName", "region", "testResults", "testResultsThree", "interpretation", "interpretationThree", "role"],
        properties: {
          interpretation: {
            type: "string",
            isVisible: { list: true, show: true, edit: false },
            components: {
              show: ({ record }) => {
                const scores = record?.params?.calculatedScores || {};
                const tensiya = scores.tensiya || 0;
                const rezistensiya = scores.rezistensiya || 0;
                const charchash = scores.charchash || 0;
          
                return `
                  <div style="padding: 20px; border: 1px solid #ddd; border-radius: 10px; background: #f8f9fa; text-align: center;">
                    <h3 style="color: #333;">üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è</h3>
          
                    <!-- üìä Diagramma -->
                    <canvas id="interpretationChart" width="300" height="300"></canvas>
          
                    <!-- üìã Jadval -->
                    <table style="width: 100%; margin-top: 10px; border-collapse: collapse; border: 1px solid #ddd;">
                      <thead>
                        <tr>
                          <th style="border: 1px solid #ddd; padding: 8px; background-color: #f5f5f5;">–§–∞–∑–∞</th>
                          <th style="border: 1px solid #ddd; padding: 8px; background-color: #f5f5f5;">–ë–∞–ª–ª—ã</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td style="border: 1px solid #ddd; padding: 8px;">–í—ã–≥–æ—Ä–∞–Ω–∏–µ</td>
                          <td style="border: 1px solid #ddd; padding: 8px;">${tensiya}</td>
                        </tr>
                        <tr>
                          <td style="border: 1px solid #ddd; padding: 8px;">–î–µ–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è</td>
                          <td style="border: 1px solid #ddd; padding: 8px;">${rezistensiya}</td>
                        </tr>
                        <tr>
                          <td style="border: 1px solid #ddd; padding: 8px;">–°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</td>
                          <td style="border: 1px solid #ddd; padding: 8px;">${charchash}</td>
                        </tr>
                      </tbody>
                    </table>
          
                    <!-- üü¢ Natijalar bo'yicha xulosa -->
                    <p style="margin-top: 15px; font-weight: bold; color: ${tensiya > 20 || rezistensiya > 15 || charchash > 10 ? 'red' : 'green'};">
                      ${tensiya > 20 || rezistensiya > 15 || charchash > 10 
                        ? "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å —Ä–∏—Å–∫ —Å—Ç—Ä–µ—Å—Å–∞ –∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç–¥—ã—Ö–∞—Ç—å!" 
                        : "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º!"}
                    </p>
          
                    <script>
                      setTimeout(() => {
                        const ctx = document.getElementById('interpretationChart');
                        if (!ctx) return console.error("Canvas topilmadi!");
          
                        if (window.Chart) {
                          new Chart(ctx.getContext('2d'), {
                            type: 'bar',
                            data: {
                              labels: ['–í—ã–≥–æ—Ä–∞–Ω–∏–µ', '–î–µ–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è', '–°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π'],
                              datasets: [{
                                data: [${tensiya}, ${rezistensiya}, ${charchash}],
                                backgroundColor: ['#ff6384', '#36a2eb', '#ffce56'],
                                borderColor: ['#e63946', '#457b9d', '#f4a261'],
                                borderWidth: 1
                              }]
                            },
                            options: {
                              responsive: false,
                              scales: {
                                y: { beginAtZero: true }
                              },
                              plugins: {
                                legend: { display: true, position: 'bottom' }
                              }
                            }
                          });
                        } else {
                          console.error("Chart.js yuklanmagan!");
                        }
                      }, 1000);
                    </script>
                  </div>
                `;
              }
            }
          }
          
          
          
          
,          

interpretationThree: {
  type: "string",
  isVisible: { list: true, show: true, edit: false },
  components: {
    show: ({ record }) => {
      const scores = record?.params?.calculatedScoresThree || {};
      if (!scores) return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤";

      return `
        <div style="padding: 20px; border: 1px solid #ddd; border-radius: 10px; background: #f8f9fa; text-align: center;">
          <h3 style="color: #333;">üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (–ë–µ–ª–±–∏–Ω)</h3>

          <table style="width: 100%; margin-top: 10px; border-collapse: collapse; border: 1px solid #ddd;">
            <thead>
              <tr>
                <th style="border: 1px solid #ddd; padding: 8px; background-color: #f5f5f5;">–†–æ–ª—å</th>
                <th style="border: 1px solid #ddd; padding: 8px; background-color: #f5f5f5;">–ë–∞–ª–ª—ã</th>
              </tr>
            </thead>
            <tbody>
              ${Object.entries(scores)
                .map(([role, score]) => `
                  <tr>
                    <td style="border: 1px solid #ddd; padding: 8px;">${role}</td>
                    <td style="border: 1px solid #ddd; padding: 8px;">${score}</td>
                  </tr>
                `)
                .join("")}
            </tbody>
          </table>

          <p style="margin-top: 15px; font-weight: bold;">
            üèÜ –í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å: <b>${Object.keys(scores).reduce((a, b) => (scores[a] > scores[b] ? a : b))}</b>
          </p>
        </div>
      `;
    },
  },
},
          testResults: {
            type: "mixed",
            isVisible: { list: false, show: true, edit: false },
            components: {
              show: ({ record }) => {
                const results = record?.params?.testResults;
                if (!results || !Array.isArray(results) || results.length === 0) {
                  return "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç";
                }

                // Test natijalarini chiroyli tablitada chiqarish
                return `
                  <div style="padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                    <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</h3>
                    <table style="width: 100%; border-collapse: collapse; border: 1px solid #ddd;">
                      <thead>
                        <tr>
                          <th style="border: 1px solid #ddd; padding: 8px; background-color: #f5f5f5;">‚Ññ</th>
                          <th style="border: 1px solid #ddd; padding: 8px; background-color: #f5f5f5;">–í–æ–ø—Ä–æ—Å</th>
                          <th style="border: 1px solid #ddd; padding: 8px; background-color: #f5f5f5;">–û—Ç–≤–µ—Ç</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${results.map((r, i) => `
                          <tr>
                            <td style="border: 1px solid #ddd; padding: 8px;">${i + 1}</td>
                            <td style="border: 1px solid #ddd; padding: 8px;">${r.questionText || '–í–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</td>
                            <td style="border: 1px solid #ddd; padding: 8px;">${r.answer || '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</td>
                          </tr>
                        `).join('')}
                      </tbody>
                    </table>
                  </div>
                `;
              },
            },
          },

          testResultsThree: {
            type: "mixed",
            isVisible: { list: false, show: true, edit: false },
            components: {
              show: ({ record }) => {
                const results = record?.params?.testResultsThree;
                if (!results || !Array.isArray(results) || results.length === 0) {
                  return "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç";
                }

                return `
                  <div style="padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                    <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ë–µ–ª–±–∏–Ω–∞</h3>
                    <table style="width: 100%; border-collapse: collapse; border: 1px solid #ddd;">
                      <thead>
                        <tr>
                          <th style="border: 1px solid #ddd; padding: 8px;">‚Ññ</th>
                          <th style="border: 1px solid #ddd; padding: 8px;">–í–æ–ø—Ä–æ—Å</th>
                          <th style="border: 1px solid #ddd; padding: 8px;">–û—Ç–≤–µ—Ç</th>
                          <th style="border: 1px solid #ddd; padding: 8px;">–ë–∞–ª–ª—ã</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${results.map((r, i) => `
                          <tr>
                            <td style="border: 1px solid #ddd; padding: 8px;">${i + 1}</td>
                            <td style="border: 1px solid #ddd; padding: 8px;">${r.questionText || '–í–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</td>
                            <td style="border: 1px solid #ddd; padding: 8px;">${r.answer || '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</td>
                            <td style="border: 1px solid #ddd; padding: 8px;">${r.score || '0'}</td>
                          </tr>
                        `).join("")}
                      </tbody>
                    </table>
                  </div>
                `;
              },
            },
          },
        },
      },
    },

    
    {
      resource: TestQuestion,
      options: {
        parent: { name: "Tests", icon: "Book" },
        listProperties: ["number", "question", "options", "category", "phase", "weight"],
        showProperties: ["number", "question", "options", "category", "phase", "weight", "points"],
        editProperties: ["number", "question", "options", "category", "phase", "weight", "points"],
        properties: {
          question: { isVisible: { list: true, show: true, edit: true } },
          options: { isVisible: { list: true, show: true, edit: true } },
          number: { isVisible: true },
          phase: { isVisible: true },
          category: { isVisible: true },
          weight: { isVisible: true },
        },
      },
    },
    
    {
      resource: TestQuestionTwo,
      options: {
        parent: { name: "Tests", icon: "Book" },
        listProperties: ["number", "question", "options", "category", "phase", "weight"],
        showProperties: ["number", "question", "options", "category", "phase", "weight", "points"],
        editProperties: ["number", "question", "options", "category", "phase", "weight", "points"],
        properties: {
          question: { isVisible: { list: true, show: true, edit: true } },
          options: { isVisible: { list: true, show: true, edit: true } },
          number: { isVisible: true },
          phase: { isVisible: true },
          category: { isVisible: true },
          weight: { isVisible: true },
        },
      },
    },

    {
      resource: TestQuestionThree,
      options: {
        parent: { name: "Tests", icon: "Book" },
        listProperties: ["number", "question"],
        editProperties: ["number", "question", "options", "roles", "points"],
        showProperties: ["number", "question", "options", "roles", "points"],
        properties: {
          number: { type: "number", isVisible: { list: true, show: true, edit: true } },
          question: { type: "string", isVisible: { list: true, show: true, edit: true } },
          options: { 
            type: "array", 
            isVisible: { list: false, show: true, edit: true },
          },
          roles: { 
            type: "array", 
            isVisible: { list: false, show: true, edit: true },
          },
          points: { 
            type: "array", 
            isVisible: { list: false, show: true, edit: true },
          }
        },
        actions: {
          edit: { isAccessible: ({ currentAdmin }) => currentAdmin?.role === "creator" || currentAdmin?.role === "psixolog" },
          delete: { isAccessible: ({ currentAdmin }) => currentAdmin?.role === "creator" || currentAdmin?.role === "psixolog" },
        },
      },
    },
    

    {
      resource: Client,
      options: {
        parent: { name: "Users info", icon: "Folder" },
        listProperties: ["email", "idName"], 
        editProperties: ["email", "idName"],
        showProperties: ["email", "idName"],
        actions: {
          show: { isAccessible: ({ currentAdmin }) => currentAdmin?.role === "creator" || currentAdmin?.role === "psixolog" || currentAdmin?.role === "client" },
          edit: { isAccessible: ({ currentAdmin }) => currentAdmin?.role === "creator" || currentAdmin?.role === "psixolog" },
          delete: { isAccessible: ({ currentAdmin }) => currentAdmin?.role === "creator" || currentAdmin?.role === "psixolog" },
        },
      },
    },
  ],
  branding: {
    companyName: "MyApp",
    logo: "https://example.com/logo.png",
  },
});

const adminRouter = AdminJSExpress.buildAuthenticatedRouter(
  adminJs,
  {
    authenticate: async (email, password) => {
      if (email === "1" && password === "1") {
        return { email: "admin@example.com", role: "psixolog" };
      } else if (email === "1" && password === "2") {
        return { email: "client@example.com", role: "client" };
      } else if (email === "creator" && password === "creator123") {
        return { email: "creator@example.com", role: "creator" };
      }
      return null;
    },
    cookieName: "adminjs",
    cookiePassword: "some-secret-password",
  },
  null,
  {
    resave: false,
    saveUninitialized: true,
    secret: "some-secret-password",
    store: MongoStore.create({ mongoUrl: "mongodb+srv://saidaliyevjasur450:xkSeavDSFqazblwx@paymall.t1g8n.mongodb.net" }),
  }
);

app.use("/admin", adminRouter);



// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
const users = {};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "saidaliyevjasur450@gmail.com",
    pass: "ckyt spcm yjlz ftse",
  },
  secure: true,
  port: 465,
  debug: true, // Debug loglarini yoqish
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ xodim
app.post("/api/register", (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
      return res.status(400).json({ success: false, message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });
  }

  // Foydalanuvchi ma'lumotlarini saqlash
  users[email] = { password };
  
  res.json({ success: true, message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞." }); // Email jo‚Äònatish yo‚Äòq
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ buyurtmachi
// Yangi mijozni ro‚Äòyxatdan o‚Äòtkazish
app.post("/api/register-client", async (req, res) => {
  const { idName, email } = req.body;

  // idName mavjudligini tekshirish
  if (!idName) {
    return res
      .status(400)
      .json({ success: false, message: "ID Name kiritilishi majburiy." });
  }

  try {
    // idNameni tekshirish
    const query = { idName };
    if (email) {
      query.email = email; // Agar email kiritilgan bo'lsa, qidiruv shartlariga qo'shish
    }
    const existingClients = await Client.find(query);

    if (existingClients.length > 0) {
      return res.json({
        success: true,
        message: "ID Name mavjud.",
        clients: existingClients, // Barcha mos keluvchi mijozlarni qaytarish
      });
    } else {
      return res.status(404).json({
        success: false,
        message: "ID Name yoki email mos kelmadi.",
      });
    }
  } catch (err) {
    res
      .status(500)
      .json({ success: false, message: "Xato yuz berdi: " + err.message });
  }
});


// Barcha client'larni olish uchun API
app.get("/api/register-client", async (req, res) => {
  const { idName, email } = req.query;

  // idName mavjudligini tekshirish
  if (!idName) {
    return res
      .status(400)
      .json({ success: false, message: "ID Name kiritilishi majburiy." });
  }

  try {
    const query = { idName };
    if (email) {
      query.email = email; // Agar email kiritilgan bo'lsa, qidiruv shartlariga qo'shish
    }

    const existingClient = await Client.findOne(query);

    if (existingClient) {
      return res.json({
        success: true,
        message: "ID Name mavjud.",
        client: existingClient,
      });
    } else {
      return res.status(404).json({
        success: false,
        message: "ID Name yoki email mos kelmadi.",
      });
    }
  } catch (err) {
    res
      .status(500)
      .json({ success: false, message: "Xato yuz berdi: " + err.message });
  }
});


// idName ni tekshirish uchun API
app.post("/api/check-idname", async (req, res) => {
  const { idname } = req.body;

  if (!idname) {
    return res.status(400).json({ success: false, message: "idName –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ." });
  }

  try {
    // idName ni bazadan qidirish
    const client = await Client.findOne({ idName: idname });

    if (!client) {
      return res.json({ success: false, message: "idName –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω." });
    }

    // Agar idName topilgan bo‚Äòlsa
    res.json({ success: true, message: "idName –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω." });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message });
  }
});


app.post("/api/verify-idName", async (req, res) => {
  const { idName } = req.body;

  if (!idName) {
    return res.status(400).json({ success: false, message: "idName is required" });
  }

  try {
    // Check if idName exists in the database
    const client = await ClientModel.findOne({ idName });
    if (!client) {
      return res.status(404).json({ success: false, message: "idName not found in the database" });
    }

    res.status(200).json({ success: true });
  } catch (error) {
    console.error("Error verifying idName:", error);
    res.status(500).json({ success: false, message: "Internal server error" });
  }
});



// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ID
app.post("/api/verify-id", (req, res) => {
  const { email, inputID } = req.body;
  if (!email || !inputID) {
    return res.status(400).json({ success: false, message: "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã email –∏ ID." });
  }

  const user = users[email];
  if (user && user.id === inputID) {
    return res.json({ success: true, message: "ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω." });
  }
  res.status(400).json({ success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID." });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ xodim
app.post("/api/complete-registration", (req, res) => {
  const { email, name, age, gender, companyName } = req.body;
  if (!email || !name || !age || !gender || !companyName) {
    return res.status(400).json({ success: false, message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è." });
  }

  const user = users[email];
  if (user) {
    users[email] = { ...user, name, age, gender, companyName, testResults: [] };
    return res.json({
      success: true,
      message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞.",  
      testQuestions: [
        {
          question: "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–ø—É—Å—Ç–æ—à–µ–Ω–Ω—ã–º.",
          options: ["–Ω–∏–∫–æ–≥–¥–∞", "–æ—á–µ–Ω—å —Ä–µ–¥–∫–æ", "–∏–Ω–æ–≥–¥–∞", "—á–∞—Å—Ç–æ", "–æ—á–µ–Ω—å —á–∞—Å—Ç–æ", "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å"],
        },
        // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
      ],
    });
  }
  res.status(400).json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
app.post("/api/submit-test", async (req, res) => {
  try {
    const {
      email, password, name, age, gender, companyName, region,
      selectedID, testResult, testResultThree, idName
    } = req.body;

    let user = await User.findOne({ email });

    if (!user) {
      console.log("üü¢ Yangi foydalanuvchi yaratilmoqda...");
      user = new User({
        email,
        password,
        id: selectedID,
        name,
        age,
        gender,
        companyName,
        region,
        idName,
        testResults: testResult, // ‚úÖ TestQuestionTwo natijalari
        testResultsThree: testResultThree, // ‚úÖ TestQuestionThree natijalari qo‚Äòshildi
        interpretation: "", 
        interpretationThree: "", // ‚úÖ TestQuestionThree uchun interpretatsiya qo‚Äòshildi
        calculatedScores: { tensiya: 0, rezistensiya: 0, charchash: 0 },
        calculatedScoresThree: { –ò: 0, –ü: 0, –§: 0, –ú: 0, –†: 0, –û: 0, –ö: 0, –î: 0 } // ‚úÖ TestQuestionThree uchun ballar qo‚Äòshildi
      });
    } else {
      console.log("üü° Foydalanuvchi topildi, test natijalari yangilanmoqda...");
      user.name = name;
      user.age = age;
      user.gender = gender;
      user.companyName = companyName;
      user.region = region;
      user.id = selectedID;
      user.idName = idName;
      
      // ‚úÖ Ikkala test natijalarini yangilash
      user.testResults = [...user.testResults, ...testResult]; 
      user.testResultsThree = [...user.testResultsThree, ...testResultThree];
    }

    await user.save();
    res.status(200).json({ message: "‚úÖ User saved successfully", user });
  } catch (error) {
    console.error("üî¥ Serverda xatolik:", error);
    res.status(500).json({ message: "‚ùå Server error", error });
  }
});





app.get("/api/get-users", async (req, res) => {
  try {
    const users = await User.find();

    if (users.length === 0) {
      return res.status(404).json({ message: "Foydalanuvchilar topilmadi" });
    }

    // `testResults` ichidagi har bir savol uchun `questionText` ni qo‚Äòshish
    for (let user of users) {
      for (let result of user.testResults) {
        // Avval `findById` orqali topamiz
        let question = await TestQuestionTwo.findById(result.questionId);

        // Agar `findById` ishlamasa, `findOne` orqali tekshiramiz
        if (!question) {
          question = await TestQuestionTwo.findOne({ _id: result.questionId });
        }

        // `questionText` ni qo‚Äòshish
        result.questionText = question ? question.question : "‚ùå Savol topilmadi";
      }
    }

    console.log("‚úÖ Yangilangan foydalanuvchilar ro‚Äòyxati:", JSON.stringify(users, null, 2));
    res.status(200).json({ message: "Users found", users });
  } catch (error) {
    console.error("Serverda xatolik:", error);
    res.status(500).json({ message: "Server error", error });
  }
});





// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

app.post("/api/test-questions", async (req, res) => {
  const { number, question, options, phase, points } = req.body;
  if (
    !number ||
    !question ||
    !options ||
    !Array.isArray(options) ||
    !phase ||
    !points ||
    points.length !== options.length
  ) {
    return res.status(400).json({
      success: false,
      message: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫, –≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ñ–∞–∑—É –∏ –±–∞–ª–ª—ã.",
    });
  }

  const newTestQuestion = new TestQuestion({ number, question, options, phase, points });
  await newTestQuestion.save();

  res.json({ success: true, message: "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω." });
});


app.post("/api/calculate-test-results", async (req, res) => {
  const { answers } = req.body;
  if (!answers || typeof answers !== "object") {
    return res.status(400).json({ success: false, message: "–û—Ç–≤–µ—Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã." });
  }

  const questions = await TestQuestion.find();
  let results = { tensiya: 0, rezistensiya: 0, charchash: 0 };

  for (const question of questions) {
    const answer = answers[question._id];
    if (answer) {
      const optionIndex = question.options.indexOf(answer);
      if (optionIndex !== -1) {
        const points = question.points[optionIndex];
        results[question.phase] += points;
      }
    }
  }

  res.json({ success: true, results });
});



// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
app.get("/api/test-questions", async (req, res) => {
  const { selectedID } = req.query;
  const testQuestions = await TestQuestion.find({ phase: selectedID }).sort({ number: 1 });
  res.json({ success: true, testQuestions });
});

// second test
app.get("/api/test-question-two", async (req, res) => {
  try {
    const { phase } = req.query;

    let query = {};
    if (phase) {
      query.phase = phase; // ‚úÖ Agar phase bor bo‚Äòlsa, faqat shu bo‚Äòyicha filtrlaydi
    }

    const testQuestions = await TestQuestionTwo.find(query)
      .sort({ number: 1 }) // ‚úÖ Savollar tartib bo‚Äòyicha chiqadi
      .lean(); // ‚úÖ Natijalarni to‚Äòg‚Äòridan-to‚Äòg‚Äòri obyektga aylantiradi

    if (!testQuestions || testQuestions.length === 0) {
      console.warn("‚ö†Ô∏è Hech qanday test topilmadi!");
    }

    const totalTests = await TestQuestionTwo.countDocuments({}); // ‚úÖ Jami testlar sonini olamiz

    console.log(`üîç Umumiy testlar soni: ${totalTests}, So‚Äòralgan testlar: ${testQuestions.length}`);

    res.json({ success: true, total: totalTests, returned: testQuestions.length, testQuestions });
  } catch (error) {
    console.error("‚ùå Xatolik:", error);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
});



app.post("/api/test-questiontwo", async (req, res) => {
  const { number, question, options, phase, points } = req.body;
  if (
    !number ||
    !question ||
    !options ||
    !Array.isArray(options) ||
    !phase ||
    !points ||
    points.length !== options.length
  ) {
    return res.status(400).json({
      success: false,
      message: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫, –≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ñ–∞–∑—É –∏ –±–∞–ª–ª—ã.",
    });
  }

  const newTestQuestion = new TestQuestionTwo({ number, question, options, phase, points });
  await newTestQuestion.save();

  res.json({ success: true, message: "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω." });
});


  app.post("/api/test-question-two/calculate-results", async (req, res) => {
    const { email, answers } = req.body;
    if (!email || !answers) {
      return res.status(400).json({ success: false, message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö" });
    }

    try {
      let questions = await TestQuestionTwo.find();
      if (!questions || questions.length === 0) {
        return res.status(404).json({ success: false, message: "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
      }

      let results = { tensiya: 0, rezistensiya: 0, charchash: 0 };

      console.log("‚úÖ Foydalanuvchi yuborgan test javoblari:", answers);

      for (const userAnswer of answers) {
        const question = questions.find(q => String(q._id) === userAnswer.questionId);
        if (!question) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å —Å ID ${userAnswer.questionId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
          continue;
        }

        // **üîπ Agar `phase` mavjud bo‚Äòlmasa, default "tensiya" qo‚Äòyiladi**
        if (!question.phase) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å ${question._id} –Ω–µ –∏–º–µ–µ—Ç —Ñ–∞–∑—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "tensiya" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`);
          question.phase = "tensiya";
        }

        // **üîπ Agar `points` bo‚Äòsh bo‚Äòlsa, default [5, 4, 3, 2, 1] qo‚Äòyiladi**
        if (!question.points || !Array.isArray(question.points) || question.points.length === 0) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å ${question._id} –Ω–µ –∏–º–µ–µ—Ç –±–∞–ª–ª–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º [5, 4, 3, 2, 1].`);
          question.points = [5, 4, 3, 2, 1];
        }

        const optionIndex = question.options.indexOf(userAnswer.answer);
        console.log(`üîç Qidirilayotgan javob: ${userAnswer.answer}, Index: ${optionIndex}`);

        if (optionIndex === -1) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç '${userAnswer.answer}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –≤–æ–ø—Ä–æ—Å–æ–≤`);
          continue;
        }

        console.log(`‚úÖ Javob: ${userAnswer.answer}, Ball: ${question.points[optionIndex]}`);
        results[question.phase] += question.points[optionIndex] || 0;
      }

      console.log("üìä Hisoblangan natijalar:", results);

      let interpretation = "üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n";
      interpretation += ` –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ: ${results.tensiya}\n`;
      interpretation += ` –î–µ–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: ${results.rezistensiya}\n`;
      interpretation += ` –°–Ω–∏–∂–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${results.charchash}\n`;

      if (results.tensiya > 20 || results.rezistensiya > 15 || results.charchash > 10) {
        interpretation += "\n‚ö†Ô∏è **–£ –≤–∞—Å –µ—Å—Ç—å —Ä–∏—Å–∫ —Å—Ç—Ä–µ—Å—Å–∞ –∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç–¥—ã—Ö–∞—Ç—å!**";
      } else if (results.tensiya < 5 && results.rezistensiya < 5 && results.charchash < 5) {
        interpretation += "\n‚úÖ **–í—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ!**";
      } else {
        interpretation += "\n‚úÖ **–£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º.**";
      }

      await User.findOneAndUpdate(
        { email },
        { $set: { testResults: answers, interpretation, calculatedScores: results } },
        { new: true }
      );

      res.json({ success: true, results, interpretation });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ", error);
      res.status(500).json({ success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" });
    }
  });







// third test

// app.get("/api/test-question-three", async (req, res) => {
//   const { phase } = req.query;

//   try {
//     const testQuestions = await TestQuestionThree.find({ phase }).sort({ number: 1 });
//     res.json({ success: true, testQuestions });
//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
//   }
// });

app.get("/api/test-question-three", async (req, res) => {
  try {
    const testQuestions = await TestQuestionThree.find().sort({ number: 1 }).lean();
    const totalTests = await TestQuestionThree.countDocuments({}); // ‚úÖ Umumiy testlar sonini olamiz

    if (!testQuestions.length) {
      console.warn("‚ö†Ô∏è TestQuestionThree bo‚Äòyicha hech qanday test topilmadi!");
      return res.json({ success: false, message: "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", total: 0, returned: 0, testQuestions: [] });
    }

    console.log(`üîç Umumiy testlar soni: ${totalTests}, So‚Äòralgan testlar: ${testQuestions.length}`);

    res.json({ success: true, total: totalTests, returned: testQuestions.length, testQuestions });
  } catch (error) {
    console.error("‚ùå Xatolik:", error);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
});



app.post("/api/test-question-three", async (req, res) => {
  const { number, question, options, roles, points } = req.body;

  if (
    !number ||
    !question ||
    !options ||
    !Array.isArray(options) ||
    options.length === 0 ||
    !roles ||
    !Array.isArray(roles) ||
    roles.length !== options.length ||
    !points ||
    !Array.isArray(points) ||
    points.length !== options.length
  ) {
    return res.status(400).json({
      success: false,
      message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–æ–º–µ—Ä, –≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ä–æ–ª–∏ –∏ –±–∞–ª–ª—ã.",
    });
  }

  try {
    const newTestQuestion = new TestQuestionThree({ number, question, options, roles, points });
    await newTestQuestion.save();

    res.json({ success: true, message: "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω." });
  } catch (error) {
    console.error("‚ùå Xatolik:", error);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
});





app.post("/api/test-question-three/calculate-results", async (req, res) => {
  const { email, answers } = req.body;
  if (!email || !answers || !Array.isArray(answers)) {
    return res.status(400).json({ success: false, message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö" });
  }

  try {
    // **üìå Bazadan barcha test savollarini olish**
    let questions = await TestQuestionThree.find();
    if (!questions || questions.length === 0) {
      return res.status(404).json({ success: false, message: "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    let results = { –ò: 0, –ü: 0, –§: 0, –ú: 0, –†: 0, –û: 0, –ö: 0, –î: 0 };

    console.log("‚úÖ Foydalanuvchi yuborgan test javoblari:", answers);

    for (const userAnswer of answers) {
      const question = questions.find(q => String(q._id) === userAnswer.questionId);
      if (!question) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å —Å ID ${userAnswer.questionId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
        continue;
      }

      const optionIndex = question.options.indexOf(userAnswer.answer);
      if (optionIndex === -1) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç '${userAnswer.answer}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –≤–æ–ø—Ä–æ—Å–∞ ${question._id}`);
        continue;
      }

      // **üîπ `roles` massivi tekshiriladi**
      if (!question.roles || question.roles.length !== question.options.length) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å ${question._id} –∏–º–µ–µ—Ç ${question.options.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–æ —Ç–æ–ª—å–∫–æ ${question.roles.length} —Ä–æ–ª–µ–π.`);
        continue;
      }

      // **üîπ Roli mavjudligini tekshiramiz**
      const role = question.roles[optionIndex];
      if (!role || !results.hasOwnProperty(role)) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ä–æ–ª—å '${role}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö`);
        continue;
      }

      // **üîπ Ballarni qo‚Äòshish**
      console.log(`‚úÖ Javob: ${userAnswer.answer}, Roli: ${role}, Ball: ${question.points[optionIndex]}`);
      results[role] += question.points[optionIndex] || 0;
    }

    console.log("üìä Hisoblangan natijalar:", results);

    // **üîπ Eng yuqori 2 ta rolni aniqlash**
    const sortedRoles = Object.entries(results)
      .filter(([_, score]) => score > 0)
      .sort((a, b) => b[1] - a[1]);
    const topRoles = sortedRoles.slice(0, 2).map(([role]) => role);

    let interpretation = `üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n`;
    for (let [role, score] of sortedRoles) {
      interpretation += `${role}: ${score}\n`;
    }

    interpretation += `\nüîπ –í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å: *${topRoles[0] || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}*`;
    if (topRoles[1]) {
      interpretation += `\nüîπ –í—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ä–æ–ª—å: *${topRoles[1]}*`;
    }

    // **üîπ Natijalarni bazaga saqlash**
    await User.findOneAndUpdate(
      { email },
      { $set: { testResultsThree: answers, interpretationThree: interpretation, calculatedScoresThree: results } },
      { new: true }
    );

    res.json({ success: true, results, interpretation });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ", error);
    res.status(500).json({ success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" });
  }
});





// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 4000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${PORT}`));

